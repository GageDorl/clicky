{"version":3,"sources":["components/Card/index.js","cards.js","App.js","serviceWorker.js","index.js"],"names":["cards","Card","props","array","arrayLen","length","newArray","i","thisNum","Math","floor","random","push","splice","shuffle","map","card","console","log","className","key","name","onClick","beenClicked","endGame","reshuffle","src","image","alt","App","setState","score","state","correct","topscore","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f80dbfb5.chunk.js","sourcesContent":["import React from 'react';\r\nimport \"./style.css\";\r\nlet shuffle=(array)=>{\r\n    let arrayLen = array.length;\r\n    let newArray=[];\r\n  for(let i=0; i<arrayLen; i++){\r\n    let thisNum = Math.floor(Math.random()*array.length)\r\n    newArray.push(array[thisNum]);\r\n    array.splice(thisNum,1)\r\n  }\r\n  return newArray;\r\n} \r\nlet cards;\r\n\r\nfunction Card(props) {\r\n    return(\r\n        cards=shuffle(props.cards),\r\n        cards.map(card=> {console.log(cards);return(\r\n            <div className=\"col-md-3\">\r\n                <div key={card.name} className=\"char-card\" onClick={card.beenClicked ? ()=>props.endGame(cards) : ()=>{card.beenClicked=true;props.reshuffle(cards)}}>\r\n                    <img src={card.image} alt={\"picture of \"+card.name} />\r\n                </div>\r\n            </div>\r\n            )\r\n        }\r\n        )\r\n    )\r\n}\r\nexport default Card;","export default [\r\n    {\r\n    \"name\":\"Steve\",\r\n    \"image\":\"https://gamepedia.cursecdn.com/minecraft_gamepedia/f/f3/Steve.png\",\r\n    \"beenClicked\":false\r\n},\r\n{\r\n    \"name\":\"Zombie\",\r\n    \"image\":\"https://gamepedia.cursecdn.com/minecraft_gamepedia/thumb/c/c3/Zombie.png/163px-Zombie.png?version=fb04ab364f9c785992991f5a2a9c14bc\",\r\n    \"beenClicked\":false\r\n},\r\n{\r\n    \"name\":\"Skeleton\",\r\n    \"image\":\"https://gamepedia.cursecdn.com/minecraft_gamepedia/2/23/Skeleton.png\",\r\n    \"beenClicked\":false\r\n},\r\n{\r\n    \"name\":\"Creeper\",\r\n    \"image\":\"https://vignette.wikia.nocookie.net/minecraft/images/e/ee/CreeperImage.png/revision/latest/top-crop/width/360/height/450?cb=20191126080723\",\r\n    \"beenClicked\":false\r\n},\r\n{\r\n    \"name\":\"Enderman\",\r\n    \"image\":\"https://gamepedia.cursecdn.com/minecraft_gamepedia/2/28/Enderman.png\",\r\n    \"beenClicked\":false\r\n},\r\n{\r\n    \"name\":\"Spider\",\r\n    \"image\":\"https://gamepedia.cursecdn.com/minecraft_gamepedia/8/84/Spider.png\",\r\n    \"beenClicked\":false\r\n},\r\n{\r\n    \"name\":\"Witch\",\r\n    \"image\":\"https://gamepedia.cursecdn.com/minecraft_gamepedia/e/e6/Witch.png\",\r\n    \"beenClicked\":false\r\n},\r\n{\r\n    \"name\":\"Villager\",\r\n    \"image\":\"https://vignette.wikia.nocookie.net/minecraft/images/c/cd/New_VillagerB.gif/revision/latest?cb=20190429124124\",\r\n    \"beenClicked\":false\r\n},\r\n{\r\n    \"name\":\"Golem\",\r\n    \"image\":\"https://gamepedia.cursecdn.com/minecraft_gamepedia/0/0d/Iron_Golem.png\",\r\n    \"beenClicked\":false\r\n},\r\n{\r\n    \"name\":\"Drowned\",\r\n    \"image\":\"https://gamepedia.cursecdn.com/minecraft_gamepedia/5/57/Drowned.png\",\r\n    \"beenClicked\":false\r\n},\r\n{\r\n    \"name\":\"Slime\",\r\n    \"image\":\"https://gamepedia.cursecdn.com/minecraft_gamepedia/3/38/Slime.png\",\r\n    \"beenClicked\":false\r\n},\r\n{\r\n    \"name\":\"Pigman\",\r\n    \"image\":\"https://gamepedia.cursecdn.com/minecraft_gamepedia/0/09/Zombie_Pigman.png\",\r\n    \"beenClicked\":false\r\n}\r\n]","import React, { Component } from 'react';\nimport './App.css';\nimport Card from './components/Card';\nimport cards from \"./cards.js\"\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state={\n      score:0,\n      topscore:0,\n      cards:cards,\n      correct:0\n    }\n}\n\nreshuffle=(cards)=>{\n  this.setState({score:this.state.score+1,cards:cards, correct:1})\n  console.log(cards)\n  console.log(\"reshuffled\")\n}\nendGame=(cards)=>{\n  if(this.state.score>this.state.topscore){\n    this.setState({topscore:this.state.score})\n  }\n  cards.map(card=> (card.beenClicked=false));\n  this.setState({score:0,cards:cards,correct:2})\n  console.log(\"ended\")\n\n}\n\n  render(){\n  return (\n    <div className=\"App\">\n      <div className=\"Nav\">\n        <span className=\"nav-left\">Minecraft Clicky Game</span> <span className=\"nav-center\">{this.state.correct===0? \"Start PLaying\" : (this.state.correct===1?\"You Guessed Correct\":\"You guessed Wrong\")}</span> <span className=\"nav-right\">Score={this.state.score} Topscore={this.state.topscore}</span>\n      </div>\n      <div className=\"container\">\n        <div className=\"row\"> \n        {console.log(this.state)}\n          <Card cards={this.state.cards} endGame={this.endGame} reshuffle={this.reshuffle} state={this.state}/>\n          {console.log(this.state)}\n        </div>\n      </div>\n    </div>\n  );}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}